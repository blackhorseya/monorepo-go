// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	model "github.com/blackhorseya/monorepo-go/entity/domain/market/model"
	contextx "github.com/blackhorseya/monorepo-go/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// GetBySymbol mocks base method.
func (m *MockStorager) GetBySymbol(ctx contextx.Contextx, symbol string) (*model.StockInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySymbol", ctx, symbol)
	ret0, _ := ret[0].(*model.StockInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySymbol indicates an expected call of GetBySymbol.
func (mr *MockStoragerMockRecorder) GetBySymbol(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySymbol", reflect.TypeOf((*MockStorager)(nil).GetBySymbol), ctx, symbol)
}

// MockIQuoteRepo is a mock of IQuoteRepo interface.
type MockIQuoteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIQuoteRepoMockRecorder
}

// MockIQuoteRepoMockRecorder is the mock recorder for MockIQuoteRepo.
type MockIQuoteRepoMockRecorder struct {
	mock *MockIQuoteRepo
}

// NewMockIQuoteRepo creates a new mock instance.
func NewMockIQuoteRepo(ctrl *gomock.Controller) *MockIQuoteRepo {
	mock := &MockIQuoteRepo{ctrl: ctrl}
	mock.recorder = &MockIQuoteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQuoteRepo) EXPECT() *MockIQuoteRepoMockRecorder {
	return m.recorder
}
