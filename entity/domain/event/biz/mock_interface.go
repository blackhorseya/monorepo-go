// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	model "github.com/blackhorseya/monorepo-go/entity/domain/event/model"
	model0 "github.com/blackhorseya/monorepo-go/entity/domain/user/model"
	contextx "github.com/blackhorseya/monorepo-go/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIEventBiz is a mock of IEventBiz interface.
type MockIEventBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIEventBizMockRecorder
}

// MockIEventBizMockRecorder is the mock recorder for MockIEventBiz.
type MockIEventBizMockRecorder struct {
	mock *MockIEventBiz
}

// NewMockIEventBiz creates a new mock instance.
func NewMockIEventBiz(ctrl *gomock.Controller) *MockIEventBiz {
	mock := &MockIEventBiz{ctrl: ctrl}
	mock.recorder = &MockIEventBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventBiz) EXPECT() *MockIEventBizMockRecorder {
	return m.recorder
}

// CreateRedPacket mocks base method.
func (m *MockIEventBiz) CreateRedPacket(ctx contextx.Contextx, who *model0.UserAccount, amount uint64, count uint32) (*model.RedPacket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRedPacket", ctx, who, amount, count)
	ret0, _ := ret[0].(*model.RedPacket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRedPacket indicates an expected call of CreateRedPacket.
func (mr *MockIEventBizMockRecorder) CreateRedPacket(ctx, who, amount, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRedPacket", reflect.TypeOf((*MockIEventBiz)(nil).CreateRedPacket), ctx, who, amount, count)
}

// GrabRedPacket mocks base method.
func (m *MockIEventBiz) GrabRedPacket(ctx contextx.Contextx, who *model0.UserAccount, packetID string) (*model.GrabRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrabRedPacket", ctx, who, packetID)
	ret0, _ := ret[0].(*model.GrabRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrabRedPacket indicates an expected call of GrabRedPacket.
func (mr *MockIEventBizMockRecorder) GrabRedPacket(ctx, who, packetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrabRedPacket", reflect.TypeOf((*MockIEventBiz)(nil).GrabRedPacket), ctx, who, packetID)
}

// ListRedPacket mocks base method.
func (m *MockIEventBiz) ListRedPacket(ctx contextx.Contextx, cond ListRedPacketCondition) ([]*model.RedPacket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRedPacket", ctx, cond)
	ret0, _ := ret[0].([]*model.RedPacket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRedPacket indicates an expected call of ListRedPacket.
func (mr *MockIEventBizMockRecorder) ListRedPacket(ctx, cond interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRedPacket", reflect.TypeOf((*MockIEventBiz)(nil).ListRedPacket), ctx, cond)
}
