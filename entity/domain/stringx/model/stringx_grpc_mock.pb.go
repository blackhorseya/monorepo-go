// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: entity/domain/stringx/model/stringx.proto

package model

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStringxServiceClient is a mock of StringxServiceClient interface.
type MockStringxServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStringxServiceClientMockRecorder
}

// MockStringxServiceClientMockRecorder is the mock recorder for MockStringxServiceClient.
type MockStringxServiceClientMockRecorder struct {
	mock *MockStringxServiceClient
}

// NewMockStringxServiceClient creates a new mock instance.
func NewMockStringxServiceClient(ctrl *gomock.Controller) *MockStringxServiceClient {
	mock := &MockStringxServiceClient{ctrl: ctrl}
	mock.recorder = &MockStringxServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringxServiceClient) EXPECT() *MockStringxServiceClientMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockStringxServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(*CountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockStringxServiceClientMockRecorder) Count(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStringxServiceClient)(nil).Count), varargs...)
}

// ToUpper mocks base method.
func (m *MockStringxServiceClient) ToUpper(ctx context.Context, in *ToUpperRequest, opts ...grpc.CallOption) (*ToUpperResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ToUpper", varargs...)
	ret0, _ := ret[0].(*ToUpperResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToUpper indicates an expected call of ToUpper.
func (mr *MockStringxServiceClientMockRecorder) ToUpper(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUpper", reflect.TypeOf((*MockStringxServiceClient)(nil).ToUpper), varargs...)
}

// MockStringxServiceServer is a mock of StringxServiceServer interface.
type MockStringxServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStringxServiceServerMockRecorder
}

// MockStringxServiceServerMockRecorder is the mock recorder for MockStringxServiceServer.
type MockStringxServiceServerMockRecorder struct {
	mock *MockStringxServiceServer
}

// NewMockStringxServiceServer creates a new mock instance.
func NewMockStringxServiceServer(ctrl *gomock.Controller) *MockStringxServiceServer {
	mock := &MockStringxServiceServer{ctrl: ctrl}
	mock.recorder = &MockStringxServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringxServiceServer) EXPECT() *MockStringxServiceServerMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockStringxServiceServer) Count(ctx context.Context, in *CountRequest) (*CountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, in)
	ret0, _ := ret[0].(*CountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockStringxServiceServerMockRecorder) Count(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStringxServiceServer)(nil).Count), ctx, in)
}

// ToUpper mocks base method.
func (m *MockStringxServiceServer) ToUpper(ctx context.Context, in *ToUpperRequest) (*ToUpperResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUpper", ctx, in)
	ret0, _ := ret[0].(*ToUpperResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToUpper indicates an expected call of ToUpper.
func (mr *MockStringxServiceServerMockRecorder) ToUpper(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUpper", reflect.TypeOf((*MockStringxServiceServer)(nil).ToUpper), ctx, in)
}
