// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StringxServiceClient is the client API for StringxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringxServiceClient interface {
	ToUpper(ctx context.Context, in *ToUpperRequest, opts ...grpc.CallOption) (*ToUpperResponse, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
}

type stringxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStringxServiceClient(cc grpc.ClientConnInterface) StringxServiceClient {
	return &stringxServiceClient{cc}
}

func (c *stringxServiceClient) ToUpper(ctx context.Context, in *ToUpperRequest, opts ...grpc.CallOption) (*ToUpperResponse, error) {
	out := new(ToUpperResponse)
	err := c.cc.Invoke(ctx, "/stringx.StringxService/ToUpper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringxServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/stringx.StringxService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringxServiceServer is the server API for StringxService service.
// All implementations should embed UnimplementedStringxServiceServer
// for forward compatibility
type StringxServiceServer interface {
	ToUpper(context.Context, *ToUpperRequest) (*ToUpperResponse, error)
	Count(context.Context, *CountRequest) (*CountResponse, error)
}

// UnimplementedStringxServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStringxServiceServer struct {
}

func (UnimplementedStringxServiceServer) ToUpper(context.Context, *ToUpperRequest) (*ToUpperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToUpper not implemented")
}
func (UnimplementedStringxServiceServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}

// UnsafeStringxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringxServiceServer will
// result in compilation errors.
type UnsafeStringxServiceServer interface {
	mustEmbedUnimplementedStringxServiceServer()
}

func RegisterStringxServiceServer(s grpc.ServiceRegistrar, srv StringxServiceServer) {
	s.RegisterService(&StringxService_ServiceDesc, srv)
}

func _StringxService_ToUpper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToUpperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringxServiceServer).ToUpper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringx.StringxService/ToUpper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringxServiceServer).ToUpper(ctx, req.(*ToUpperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringxService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringxServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringx.StringxService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringxServiceServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StringxService_ServiceDesc is the grpc.ServiceDesc for StringxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stringx.StringxService",
	HandlerType: (*StringxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToUpper",
			Handler:    _StringxService_ToUpper_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _StringxService_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entity/domain/stringx/model/stringx.proto",
}
