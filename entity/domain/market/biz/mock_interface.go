// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"
	time "time"

	model "github.com/blackhorseya/monorepo-go/entity/domain/market/model"
	contextx "github.com/blackhorseya/monorepo-go/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIMarketBiz is a mock of IMarketBiz interface.
type MockIMarketBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIMarketBizMockRecorder
}

// MockIMarketBizMockRecorder is the mock recorder for MockIMarketBiz.
type MockIMarketBizMockRecorder struct {
	mock *MockIMarketBiz
}

// NewMockIMarketBiz creates a new mock instance.
func NewMockIMarketBiz(ctrl *gomock.Controller) *MockIMarketBiz {
	mock := &MockIMarketBiz{ctrl: ctrl}
	mock.recorder = &MockIMarketBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMarketBiz) EXPECT() *MockIMarketBizMockRecorder {
	return m.recorder
}

// GetMarketInfoByType mocks base method.
func (m *MockIMarketBiz) GetMarketInfoByType(ctx contextx.Contextx, typeStr string, t time.Time) (*model.MarketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarketInfoByType", ctx, typeStr, t)
	ret0, _ := ret[0].(*model.MarketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarketInfoByType indicates an expected call of GetMarketInfoByType.
func (mr *MockIMarketBizMockRecorder) GetMarketInfoByType(ctx, typeStr, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarketInfoByType", reflect.TypeOf((*MockIMarketBiz)(nil).GetMarketInfoByType), ctx, typeStr, t)
}

// GetStockBySymbol mocks base method.
func (m *MockIMarketBiz) GetStockBySymbol(ctx contextx.Contextx, symbol string) (*model.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockBySymbol", ctx, symbol)
	ret0, _ := ret[0].(*model.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockBySymbol indicates an expected call of GetStockBySymbol.
func (mr *MockIMarketBizMockRecorder) GetStockBySymbol(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockBySymbol", reflect.TypeOf((*MockIMarketBiz)(nil).GetStockBySymbol), ctx, symbol)
}

// ListStocks mocks base method.
func (m *MockIMarketBiz) ListStocks(ctx contextx.Contextx, options ListStocksOptions) ([]*model.StockInfo, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStocks", ctx, options)
	ret0, _ := ret[0].([]*model.StockInfo)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStocks indicates an expected call of ListStocks.
func (mr *MockIMarketBizMockRecorder) ListStocks(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStocks", reflect.TypeOf((*MockIMarketBiz)(nil).ListStocks), ctx, options)
}
