// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	agg "github.com/blackhorseya/monorepo-go/entity/orianna/domain/market/agg"
	contextx "github.com/blackhorseya/monorepo-go/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIMarketBiz is a mock of IMarketBiz interface.
type MockIMarketBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIMarketBizMockRecorder
}

// MockIMarketBizMockRecorder is the mock recorder for MockIMarketBiz.
type MockIMarketBizMockRecorder struct {
	mock *MockIMarketBiz
}

// NewMockIMarketBiz creates a new mock instance.
func NewMockIMarketBiz(ctrl *gomock.Controller) *MockIMarketBiz {
	mock := &MockIMarketBiz{ctrl: ctrl}
	mock.recorder = &MockIMarketBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMarketBiz) EXPECT() *MockIMarketBizMockRecorder {
	return m.recorder
}

// ListStocks mocks base method.
func (m *MockIMarketBiz) ListStocks(ctx contextx.Contextx) ([]agg.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStocks", ctx)
	ret0, _ := ret[0].([]agg.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStocks indicates an expected call of ListStocks.
func (mr *MockIMarketBizMockRecorder) ListStocks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStocks", reflect.TypeOf((*MockIMarketBiz)(nil).ListStocks), ctx)
}
