// Code generated by MockGen. DO NOT EDIT.
// Source: stock.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	agg "github.com/blackhorseya/monorepo-go/entity/orianna/domain/market/agg"
	contextx "github.com/blackhorseya/monorepo-go/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIStockRepo is a mock of IStockRepo interface.
type MockIStockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIStockRepoMockRecorder
}

// MockIStockRepoMockRecorder is the mock recorder for MockIStockRepo.
type MockIStockRepoMockRecorder struct {
	mock *MockIStockRepo
}

// NewMockIStockRepo creates a new mock instance.
func NewMockIStockRepo(ctrl *gomock.Controller) *MockIStockRepo {
	mock := &MockIStockRepo{ctrl: ctrl}
	mock.recorder = &MockIStockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStockRepo) EXPECT() *MockIStockRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIStockRepo) Add(ctx contextx.Contextx, stock agg.Stock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, stock)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIStockRepoMockRecorder) Add(ctx, stock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIStockRepo)(nil).Add), ctx, stock)
}

// List mocks base method.
func (m *MockIStockRepo) List(ctx contextx.Contextx) ([]agg.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]agg.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIStockRepoMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIStockRepo)(nil).List), ctx)
}
