// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	agg "github.com/blackhorseya/monorepo-go/entity/orianna/domain/market/agg"
	contextx "github.com/blackhorseya/monorepo-go/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIEventRepo is a mock of IEventRepo interface.
type MockIEventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIEventRepoMockRecorder
}

// MockIEventRepoMockRecorder is the mock recorder for MockIEventRepo.
type MockIEventRepoMockRecorder struct {
	mock *MockIEventRepo
}

// NewMockIEventRepo creates a new mock instance.
func NewMockIEventRepo(ctrl *gomock.Controller) *MockIEventRepo {
	mock := &MockIEventRepo{ctrl: ctrl}
	mock.recorder = &MockIEventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventRepo) EXPECT() *MockIEventRepoMockRecorder {
	return m.recorder
}

// BulkUpsert mocks base method.
func (m *MockIEventRepo) BulkUpsert(ctx contextx.Contextx, items []*agg.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpsert", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpsert indicates an expected call of BulkUpsert.
func (mr *MockIEventRepoMockRecorder) BulkUpsert(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpsert", reflect.TypeOf((*MockIEventRepo)(nil).BulkUpsert), ctx, items)
}

// Create mocks base method.
func (m *MockIEventRepo) Create(ctx contextx.Contextx, item *agg.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIEventRepoMockRecorder) Create(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIEventRepo)(nil).Create), ctx, item)
}

// GetByID mocks base method.
func (m *MockIEventRepo) GetByID(ctx contextx.Contextx, id string) (agg.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(agg.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIEventRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIEventRepo)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockIEventRepo) List(ctx contextx.Contextx, opts ListOptions) ([]agg.Event, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]agg.Event)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIEventRepoMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIEventRepo)(nil).List), ctx, opts)
}
