service: orianna

frameworkVersion: '3'

plugins:
  - serverless-go-plugin

custom:
  go:
    baseDir: . # folder where go.mod file lives, if set `handler` property should be set relatively to that folder
    binDir: bin # target folder for binary files
    cgo: 0 # CGO_ENABLED flag
    cmd: 'GOARCH=amd64 GOOS=linux go build -ldflags="-s -w"' # compile command
    monorepo: false # if enabled, builds function every directory (useful for monorepo where go.mod is managed by each function
    supportedRuntimes: [ "go1.x" ] # the plugin compiles a function only if runtime is declared here (either on function or provider level)
    buildProvidedRuntimeAsBootstrap: false # if enabled, builds and archive function with only single "bootstrap" binary (useful for runtimes like provided.al2)

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'prod'}
  region: ap-northeast-3

package:
  individually: true

functions:
  # api
  restful:
    handler: ./cmd/lambda/
    name: ${sls:stage}-restful
    events:
      - http: ANY /{proxy+}
    environment: ${file(./deployments/${opt:stage, 'prod'}/.env.yaml)}

  # jobs
  taiwanStockInfo:
    handler: ./cmd/jobs/taiwanStockInfo/
    name: ${sls:stage}-taiwanStockInfo
    events:
      - schedule:
          method: scheduler
          rate: cron(45 13 * * ? *)
          timezone: Asia/Taipei
    environment: ${file(./deployments/${opt:stage, 'prod'}/.env.yaml)}
  taiwanStockPrice:
    handler: ./cmd/jobs/taiwanStockPrice/
    name: ${sls:stage}-taiwanStockPrice
    events:
      - http:
          method: post
          path: /taiwan-stock-price
    environment: ${file(./deployments/${opt:stage, 'prod'}/.env.yaml)}
  taiwanDailyQuota:
    handler: ./cmd/jobs/taiwanDailyQuota/
    name: ${sls:stage}-taiwanDailyQuota
    events:
      - schedule:
          method: scheduler
          rate: cron(45 17 * * ? *)
          timezone: Asia/Taipei
    environment: ${file(./deployments/${opt:stage, 'prod'}/.env.yaml)}

  fetchEarningsCall:
    handler: ./cmd/jobs/fetchEarningsCall/
    name: ${sls:stage}-fetchEarningsCall
    events:
      - schedule:
          method: scheduler
          rate: cron(45 17 * * ? *)
          timezone: Asia/Taipei
    environment: ${file(./deployments/${opt:stage, 'prod'}/.env.yaml)}

  # calc
  calcLongUp:
    handler: ./cmd/jobs/calcLongUp/
    name: ${sls:stage}-calcLongUp
    events:
      - http:
          method: post
          path: /calc-long-up
    environment: ${file(./deployments/${opt:stage, 'prod'}/.env.yaml)}
